"""
Architect State Module

This module defines the `ArchitectState` class, a `TypedDict` representing 
the state of the Architect agent. It also includes functions to manipulate the 
state with logging for better traceability.
"""

from pydantic import Field

from core.state import *
from models.models import RequirementsDocument, TaskQueue


class ArchitectInput(BaseInputState):
    """
    Represents the input expected by the Architect agent (or node).
    Typically sourced from user input or external contexts.
    """
    requested_standards: str = Field(
        default="",
        description="Standards that the user wants to be incorporated into the generated code."
    )
    license_header: str = Field(
        default="",
        description="License text to be added at the top of each generated file."
    )


class ArchitectOutput(BaseOutputState):
    """
    Represents the outputs produced or updated by the Architect agent (or node),
    including final results and partially updated data.
    """
    project_name: str = Field(
        description="The name of the project generated based on the user's prompt."
    )
    requirements_document: RequirementsDocument = Field(
        description="The project requirements document generated by the agent."
    )
    tasks: TaskQueue = Field(
        description="The queue of tasks generated by the agent for the project."
    )


class ArchitectState(BaseState):
    """
    Represents the state of the Architect agent, encompassing both internal configurations
    and dynamic state information required for project generation and management.
    """
    requested_standards: str = Field(
        default="",
        description="Standards that the user wants to be incorporated into the generated code."
    )
    license_header: str = Field(
        default="",
        description="License text to be added at the top of each generated file."
    )
    project_name: str = Field(
        default="",
        description="Name of the project suggested by the language model based on the given prompt."
    )
    requirements_document: RequirementsDocument = Field(
        default_factory=RequirementsDocument,
        description="Project requirements document generated by the language model."
    )
    tasks: TaskQueue = Field(
        default_factory=TaskQueue,
        description="List of tasks suggested by the language model for the given prompt."
    )
